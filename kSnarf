#!/usr/bin/python2.7

import argparse, logging, signal, sys
from lib.dbControl import Builder
from lib.os_control import Control
from lib.snarf import Snarf
from lib.unifier import Unify
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *

def crtlC(cap, unity):
    """Handle CTRL+C."""
    def tmp(signal, frame):
        print 'Stopping gracefully'
        cap.con.commit()
        print 'Total packets logged:\n'
        for k, v in unity.logDict.items():
            print '%s -- %s' % (k, v)
        sys.exit(0)
    return tmp

def main(args):
    
    ## Non usage scenarios
    if args.m is not None:
        if args.m == 'k9' and args.t is None:
            print 'Target must be specified for k9 mode\n'
            sys.exit(1)
        if args.m == 'listen' and args.t:
            print 'Targeted functionality not currently implemented for listen mode\n'
            sys.exit(1)
    if args.i is None and args.d is None:
        print '-i OR -d must be selected\n'
        sys.exit(1)
    if args.i is not None and args.m is None:
        print '-i must be used with -m'
        sys.exit(1)
    

    ## Notate the driver in use
    if args.i is not None:
        nic = args.i[0]
        control = Control(nic)
    if args.d is not None:
        iwDriver = args.d
    else:    
        iwDriver = control.iwDriver()
    
    
    
    ## Instantiate unity
    unity = Unify(iwDriver)
    
    ## Instantiate the DB
    cap = Builder()
    
    ## Handle interrupts
    signal_handler = crtlC(cap, unity)
    signal.signal(signal.SIGINT, signal_handler)

    ## Create the snarf instance that holds the database
    snarf = Snarf(cap, unity, args.m, args.p)
    
    ## Active sniffing
    if args.r is None:
        ### Perhaps switch logic to lfilter
        ### For now the logic is in sniffer method
        
        ## Listen with no target
        if args.m == 'listen':
            pHandler = snarf.sniffer()
            sniff(iface = nic, prn = pHandler, store = 0)

        ## k9
        if args.m == 'k9':
            pHandler = snarf.k9(args.t.lower())
            sniff(iface = nic, prn = pHandler, store = 0)
    
    ## PCAP reading
    else:
        if args.r is not None:
            pHandler = snarf.reader()
            sniff(offline = args.r, prn = pHandler, store = 0)
            snarf.cap.con.commit()
   

if __name__=="__main__":
    parser = argparse.ArgumentParser(description = 'kSnarf - FOSS Intelligence Gathering of the 802.11 spectrum',
                                     prog = 'kSnarf')
    parser.add_argument('-d',
                        help = 'driver choice',
                        choices = ['ath9k', 'ath9k_htc', 'unknown', 'wl12xx'])
                        
    parser.add_argument('-i',
                        help = 'interface',
                        nargs = 1)
    parser.add_argument('-m',
                        help = 'mode',
                        choices = ['k9', 'listen'])
    parser.add_argument('-p',
                        help = 'protocol',
                        choices = ['dhcp'])
    parser.add_argument('-r',
                        help = 'receive data from a pcap')
    parser.add_argument('-t',
                        help = 'target MAC')
    args = parser.parse_args()
    
    ## Deal with groups later
    if not (args.i or args.r or (args.t and not args.m)):
        print('Try:\nkSnarf --help\n')
        sys.exit(1)
    
    main(args)
